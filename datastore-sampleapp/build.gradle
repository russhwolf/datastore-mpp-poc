/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import static androidx.build.dependencies.DependenciesKt.CONSTRAINT_LAYOUT
import static androidx.build.dependencies.DependenciesKt.PROTOBUF_COMPILER
import static androidx.build.dependencies.DependenciesKt.PROTOBUF_LITE
import static androidx.build.dependencies.DependenciesKt.KOTLIN_STDLIB

plugins {
    id("AndroidXPlugin")
    id('com.android.application')
    id("org.jetbrains.kotlin.android")
    id("com.google.protobuf")
}

dependencies {
    // For DataStore with Preferences
    implementation(project(":datastore:datastore-preferences"))

    // For DataStore with protos
    implementation(project(":datastore:datastore"))

    // For settings fragment
    api("androidx.preference:preference:1.1.1")

    implementation(PROTOBUF_LITE)
    implementation(KOTLIN_STDLIB)
    implementation("androidx.appcompat:appcompat:1.2.0")

    implementation(CONSTRAINT_LAYOUT, { transitive = true })
    implementation('androidx.navigation:navigation-fragment-ktx:2.3.0')
    compileOnly project(":annotation:annotation-sampled")
}

protobuf {
    protoc {
        artifact = PROTOBUF_COMPILER
    }

    // Generates the java proto-lite code for the protos in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

// Allow usage of Kotlin's @OptIn.
tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}